The first knowledge representation is mostly egocentric, focused on finding the nearest objects to the given ship. Its method pickNearestEnemyShip finds the closest enemy ship by compating shortest distance between the Toroidal2DPhysics space. The method findNearestBase returns the nearest base in the same way. PickNearestBeacon functions similairly to return the beacon closest to the ship. Already implementing some decision making, pickHighestValueFreeAsteroid determines the best asteroid by comparing the shortest distance and the value of the asteroid in a linear combination. This knowledge representation was a good choice because it allows easy access to the most important aspects of the state. The ship mostly needs to know about which objects it can reach quickest.

The heuristic used for the one ship is contained in getAsteroidCollectorAction. Because the highest priority is not dying, the heuristic first checks if the energy is below a certain value (2000). If it is, the next goal should be to get more energy, so the ship moves to the nearest beacon. Before collecting more resources from asteroids, we need to check that the ship is not full. Otherwise, there would be not point to mine more asteroids. So if the resources on board the ship are greater than 500, the ship moves to the nearest base to drop of those resources. If the ship is not dying and has room for resources, then it moves to the nearest asteroid to mine it.
